import t from"assert";var e={};var n=t;e=dashAst;function dashAst(t,e){n(t&&"object"===typeof t&&"string"===typeof t.type,"dash-ast: ast must be an AST node");if("object"===typeof e){n("function"===typeof e.enter||"function"===typeof e.leave,"dash-ast: visitor must be an object with enter/leave functions");walk(t,null,e.enter||void 0,e.leave||void 0)}else{n(e&&"function"===typeof e,"dash-ast: callback must be a function");walk(t,null,e,void 0)}}dashAst.withParent=function dashAstParent(t,e){n(t&&"object"===typeof t&&"string"===typeof t.type,"dash-ast.withParent: ast must be an AST node");if("object"===typeof e){n("function"===typeof e.enter||"function"===typeof e.leave,"dash-ast.withParent: visitor must be an object with enter/leave functions");var a=e.enter;var o=e.leave;walk(t,null,(function(t,e){t.parent=e;if(void 0!==a)return a(t)}),o?function(t){o(t)}:void 0)}else{n(e&&"function"===typeof e,"dash-ast.withParent: callback must be a function");walk(t,null,(function(t,n){t.parent=n;return e(t)}),void 0)}};function walk(t,e,n,a){var o=void 0!==n?n(t,e):void 0;if(false!==o){for(var i in t)if(has(t,i)){if("parent"===i)continue;isNode(t[i])?walk(t[i],t,n,a):Array.isArray(t[i])&&walkArray(t[i],t,n,a)}void 0!==a&&a(t,e)}}function walkArray(t,e,n,a){for(var o=0;o<t.length;o++)isNode(t[o])&&walk(t[o],e,n,a)}function isNode(t){return"object"===typeof t&&t&&"string"===typeof t.type}function has(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var a=e;export default a;

